// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.DriveConstants.*;
import frc.robot.Constants.InputConstants.*;

import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.kauailabs.navx.frc.AHRS;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX leftTalonLead;
    private WPI_TalonFX leftTalonFollower;
    private WPI_TalonFX rightTalonLead;
    private WPI_TalonFX rightTalonFollower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private double m_deadband;

    private SpeedControllerGroup m_left;
    private SpeedControllerGroup m_right; 
    private DifferentialDrive m_differentialDrive;

    private AHRS m_navX;
    /**
    *
    */
    public Drivetrain()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new WPI_TalonFX(0);
        leftTalonFollower = new WPI_TalonFX(1);
        rightTalonLead = new WPI_TalonFX(2);
        rightTalonFollower = new WPI_TalonFX(3);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
        leftTalonLead.clearStickyFaults();
        leftTalonFollower.clearStickyFaults();
        rightTalonLead.clearStickyFaults();
        rightTalonFollower.clearStickyFaults();

        //Set factoad.configFactoryDefault();
        rightTalonLead.configFactoryDefault();
        leftTalonLead.configFactoryDefault();
        
        leftTalonFollower.follow(leftTalonLead);
        rightTalonFollower.follow(rightTalonLead);

        leftTalonLead.setInverted(true);
        leftTalonFollower.setInverted(InvertType.FollowMaster);
        rightTalonLead.setInverted(false);
        rightTalonFollower.setInverted(InvertType.FollowMaster);

        leftTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_SLOT_ID, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);
        rightTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_SLOT_ID, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);

        //Configure PID
        leftTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.setNeutralMode(NeutralMode.Coast);
        leftTalonLead.setNeutralMode(NeutralMode.Coast);

        rightTalonLead.configNeutralDeadband(DEFAULT_DEADBAND);
        rightTalonFollower.configNeutralDeadband(DEFAULT_DEADBAND);
        leftTalonLead.configNeutralDeadband(DEFAULT_DEADBAND);
        leftTalonFollower.configNeutralDeadband(DEFAULT_DEADBAND);

        m_navX = new AHRS(Port.kMXP);

        //Setup Differential Drive
        m_left = new SpeedControllerGroup(leftTalonLead, leftTalonFollower);
        m_right = new SpeedControllerGroup(rightTalonLead, rightTalonFollower); 
        m_differentialDrive = new DifferentialDrive(m_left, m_right);

        //Add deadband value to SmartDashboard
        m_deadband = DEFAULT_DEADBAND;
        SmartDashboard.putNumber("Deadband", m_deadband);
    }

    @Override
    public void periodic()
    {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Left Encoder Velocity", leftTalonLead.getSensorCollection().getIntegratedSensorVelocity());
        SmartDashboard.putNumber("Left Encoder Position", leftTalonLead.getSensorCollection().getIntegratedSensorPosition());
        SmartDashboard.putNumber("Right Encoder Velocity", rightTalonLead.getSensorCollection().getIntegratedSensorVelocity());
        SmartDashboard.putNumber("Right Encoder Position", rightTalonLead.getSensorCollection().getIntegratedSensorPosition());

        SmartDashboard.putNumber("NavX Heading", m_navX.getAngle());
        SmartDashboard.putNumber("NavX Heading", m_navX.getFusedHeading());

        m_deadband = SmartDashboard.getNumber("Deadband", DEFAULT_DEADBAND);
        rightTalonLead.configNeutralDeadband(m_deadband);
        rightTalonFollower.configNeutralDeadband(m_deadband);
        leftTalonLead.configNeutralDeadband(m_deadband);
        leftTalonFollower.configNeutralDeadband(m_deadband);

        //SmartDashboard.putNumber("Gyro Angle",gyro.getAngle());
        //SmartDashboard.putNumber("Gyro Yaw", gyro.getYaw());
        //SmartDashboard.putNumber("Gyro Pitch", gyro.getPitch());
    }

    @Override
    public void simulationPeriodic() 
    {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Converts joystick input adjusted to a RPM for the Falcon's PIDF loop to aim for
    public void velocityDrive(double leftPos, double rightPos, boolean useSlowModifier, boolean useReverse)
    {
        double retval = 0.0;

        if(useReverse) 
        {     
            double temp = leftPos;
            leftPos = -rightPos;
            rightPos = -temp;
        }

        retval = clampInput(leftPos, m_deadband);
        if(useSlowModifier)
        {
            leftTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE * VELOCITY_SLOWDOWN_MODIFIER));    
        } 
        else 
        {
            leftTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE));
        }

        retval = clampInput(rightPos, m_deadband);
        if(useSlowModifier)
        {
            rightTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE * VELOCITY_SLOWDOWN_MODIFIER));    
        } 
        else 
        {
            rightTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE));
        }
    }

    // Stops motor usually used after the drive command ends to prevent shenanigans
    public void stop() 
    {
        leftTalonLead.set(TalonFXControlMode.Current,0);
        rightTalonLead.set(TalonFXControlMode.Current,0);
    }

    //Velocity Drive without Deadband for vision purposes
    public void visionDrive(double left, double right)
    {
        if (left > 1 || left < -1 || right > 1 || right < -1)
        {
            System.out.println("Invalid left motor input " + left);
            System.out.println("Invalid right motor input " + right);
            stop();
            return;
        }

        leftTalonLead.set(TalonFXControlMode.Velocity,(left * MAX_VELOCITY));
        rightTalonLead.set(TalonFXControlMode.Velocity,(right * MAX_VELOCITY));
    }

    public void arcadeDrive(double forwardMovement, double turning)
    {
        m_differentialDrive.arcadeDrive(forwardMovement, turning);
    }
    
    public double clampInput(double input, double deadband) 
    {
        double retval = 0.0;
        
        //Check if input is valid, between -1 <= input <= 1
        if((-1 <= input) && (1 >= input))
        {
            if (Math.abs(input) >= deadband)
            {
                retval = (Math.abs(input) - deadband)/(1 - deadband);

                //Check if value is supposed to be negative
                if(input < 0)
                {
                    retval = -1 * retval;
                } 
            }
        }

        return retval;
    }
}
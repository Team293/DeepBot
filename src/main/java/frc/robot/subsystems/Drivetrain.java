// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import com.kauailabs.navx.frc.AHRS;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX leftTalonLead;
    private WPI_TalonFX leftTalonFollower;
    private WPI_TalonFX rightTalonLead;
    private WPI_TalonFX rightTalonFollower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final int LEFT_LEAD_TALON_CAN_ID = 0;
    private final int LEFT_FOLLOWER_TALON_CAN_ID = 1;
    private final int RIGHT_LEAD_TALON_CAN_ID = 2;
    private final int RIGHT_FOLLOWER_TALON_CAN_ID = 3;
    
    private final double KF = 0.04759;
    private final double KP = 0.01461;
    private final double KI = 0.0;
    private final double KD = 0.0;

    private final double L_DEADBAND = .15;
    private final double R_DEADBAND = .15;
    private final double NEUTRAL_DEADBAND = .01;
    private final int PID_SLOT_ID = 0;
    private final int PID_CONFIG_TIMEOUT_MS = 10;
    private final int CONFIG_FEEDBACKSENSOR_TIMEOUT_MS = 4000;
    
    private final double CLOSED_LOOP_RAMP = 0.5;
    private final double MAX_VELOCITY = 21549;
    private final double VELOCITY_LIMIT_PERCENTAGE = 0.5;
    private final double VELOCITY_SLOWDOWN_MODIFIER = 0.5;

    private AHRS m_navX;
    /**
    *
    */
    public Drivetrain()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new WPI_TalonFX(0);
        leftTalonFollower = new WPI_TalonFX(1);
        rightTalonLead = new WPI_TalonFX(2);
        rightTalonFollower = new WPI_TalonFX(3);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
        leftTalonLead.clearStickyFaults();
        leftTalonFollower.clearStickyFaults();
        rightTalonLead.clearStickyFaults();
        rightTalonFollower.clearStickyFaults();

        //Set factory defaults for onboard PID
        leftTalonLead.configFactoryDefault();
        rightTalonLead.configFactoryDefault();
        
        leftTalonFollower.follow(leftTalonLead);
        rightTalonFollower.follow(rightTalonLead);

        leftTalonLead.setInverted(true);
        leftTalonFollower.setInverted(InvertType.FollowMaster);
        rightTalonLead.setInverted(false);
        rightTalonFollower.setInverted(InvertType.FollowMaster);

        leftTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_SLOT_ID, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);
        rightTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_SLOT_ID, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);

        //Configure PID
        leftTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.setNeutralMode(NeutralMode.Coast);
        leftTalonLead.setNeutralMode(NeutralMode.Coast);

        rightTalonLead.configNeutralDeadband(NEUTRAL_DEADBAND);
        rightTalonFollower.configNeutralDeadband(NEUTRAL_DEADBAND);
        leftTalonLead.configNeutralDeadband(NEUTRAL_DEADBAND);
        leftTalonFollower.configNeutralDeadband(NEUTRAL_DEADBAND);

        m_navX = new AHRS(Port.kMXP);
    }

    @Override
    public void periodic()
    {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Left Encoder Velocity", leftTalonLead.getSensorCollection().getIntegratedSensorVelocity());
        SmartDashboard.putNumber("Left Encoder Position", leftTalonLead.getSensorCollection().getIntegratedSensorPosition());
        SmartDashboard.putNumber("Right Encoder Velocity", rightTalonLead.getSensorCollection().getIntegratedSensorVelocity());
        SmartDashboard.putNumber("Right Encoder Position", rightTalonLead.getSensorCollection().getIntegratedSensorPosition());

        SmartDashboard.putNumber("NavX Heading", m_navX.getAngle());
        SmartDashboard.putNumber("NavX Heading", m_navX.getFusedHeading());

        //SmartDashboard.putNumber("Gyro Angle",gyro.getAngle());
        //SmartDashboard.putNumber("Gyro Yaw", gyro.getYaw());
        //SmartDashboard.putNumber("Gyro Pitch", gyro.getPitch());
    }

    @Override
    public void simulationPeriodic() 
    {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Converts joystick input adjusted for deadband to current for the motor
    public void dumbDrive(double leftPos, double rightPos) 
    {
        double motorPower = 0.0;

        motorPower = calcMotorPower(leftPos, L_DEADBAND);
        if(INVALID_INPUT == motorPower) 
        {
            System.out.println("Invalid left motor input " + leftPos);
            stop();
            return;
        } 
        else 
        {
            leftTalonLead.set(TalonFXControlMode.PercentOutput, motorPower * VELOCITY_LIMIT_PERCENTAGE);    
        }

        motorPower = calcMotorPower(rightPos, R_DEADBAND);
        if(INVALID_INPUT == motorPower) 
        {
            System.out.println("Invalid right motor input " + rightPos);
            stop();
            return;
        } 
        else 
        {
            rightTalonLead.set(TalonFXControlMode.PercentOutput, motorPower * VELOCITY_LIMIT_PERCENTAGE);    
        }   
    }

    // Converts joystick input adjusted to a RPM for the Falcon's PIDF loop to aim for
    public void velocityDrive(double leftPos, double rightPos, boolean useSlowModifier, boolean useReverse)
    {
        double retval = 0.0;

        if(useReverse) 
        {     
            double temp = leftPos;
            leftPos = -rightPos;
            rightPos = -temp;
        }

        retval = calcMotorPower(leftPos, L_DEADBAND);
        if(INVALID_INPUT == retval) 
        {
            System.out.println("Invalid left motor input " + leftPos);
            stop();
            return;
        } 
        else {
            if(useSlowModifier)
            {
                leftTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE * VELOCITY_SLOWDOWN_MODIFIER));    
            } 
            else 
            {
                leftTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE));
            }
        }

        retval = calcMotorPower(rightPos, R_DEADBAND);
        if(INVALID_INPUT == retval) 
        {
            System.out.println("Invalid right motor input " + rightPos);
            stop();
            return;
        } 
        else 
        {
            if(useSlowModifier)
            {
                rightTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE * VELOCITY_SLOWDOWN_MODIFIER));    
            } 
            else 
            {
                rightTalonLead.set(TalonFXControlMode.Velocity,(retval * MAX_VELOCITY * VELOCITY_LIMIT_PERCENTAGE));
            }
        }
    }

    // Stops motor usually used after the drive command ends to prevent shenanigans
    public void stop() 
    {
        leftTalonLead.set(TalonFXControlMode.Current, 0);
        rightTalonLead.set(TalonFXControlMode.Current, 0);
    }

    //Calculates the motor power to use based on a given deadband and 
    //joystick input from -1 to 1
    //Prevents spikes in motor power by calculating the line to use 
    //where 0 is the deadband and 1 is the max
    public double calcMotorPower(double input, double deadband) 
    {
        double retval = 0.0;

        //Check if input is inside the deadband
        if(Math.abs(input) <= deadband) 
        {
            return 0;
        }
        //input must be between -1 and 1
        if((input < -1) || (input > 1))
        { 
            return INVALID_INPUT;
        }
        
        retval = (Math.abs(input) - deadband) / (1 - deadband);

        if(input < 0)
        {
           return -1 * retval;
        }
        else
        {
            return retval;
        }
    }

    //Velocity Drive without Deadband for vision purposes
    public void visionDrive(double left, double right)
    {
        if (left > 1 || left < -1 || right > 1 || right < -1)
        {
            System.out.println("Invalid left motor input " + left);
            System.out.println("Invalid right motor input " + right);
            stop();
            return;
        }

        leftTalonLead.set(TalonFXControlMode.Velocity,(left * MAX_VELOCITY));
        rightTalonLead.set(TalonFXControlMode.Velocity,(right * MAX_VELOCITY));
    }
}

}